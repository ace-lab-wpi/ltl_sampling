/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package sampling;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class workspace_size_data implements lcm.lcm.LCMEncodable
{
    public double size_x;
    public double size_y;
 
    public workspace_size_data()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8e486f48789558bcL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sampling.workspace_size_data.class))
            return 0L;
 
        classes.add(sampling.workspace_size_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.size_x); 
 
        outs.writeDouble(this.size_y); 
 
    }
 
    public workspace_size_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public workspace_size_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sampling.workspace_size_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sampling.workspace_size_data o = new sampling.workspace_size_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.size_x = ins.readDouble();
 
        this.size_y = ins.readDouble();
 
    }
 
    public sampling.workspace_size_data copy()
    {
        sampling.workspace_size_data outobj = new sampling.workspace_size_data();
        outobj.size_x = this.size_x;
 
        outobj.size_y = this.size_y;
 
        return outobj;
    }
 
}

