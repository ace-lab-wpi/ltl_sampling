/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package sampling;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class sample_draw implements lcm.lcm.LCMEncodable
{
    public boolean if_draw;
 
    public sample_draw()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x353c2e8252453c2cL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sampling.sample_draw.class))
            return 0L;
 
        classes.add(sampling.sample_draw.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte( this.if_draw ? 1 : 0); 
 
    }
 
    public sample_draw(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public sample_draw(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sampling.sample_draw _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sampling.sample_draw o = new sampling.sample_draw();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.if_draw = ins.readByte()!=0;
 
    }
 
    public sampling.sample_draw copy()
    {
        sampling.sample_draw outobj = new sampling.sample_draw();
        outobj.if_draw = this.if_draw;
 
        return outobj;
    }
 
}

