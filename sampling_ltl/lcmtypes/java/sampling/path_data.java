/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package sampling;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class path_data implements lcm.lcm.LCMEncodable
{
    public int num_state;
    public double state_x[];
    public double state_y[];
 
    public path_data()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x6655b004fa7976deL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sampling.path_data.class))
            return 0L;
 
        classes.add(sampling.path_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.num_state); 
 
        for (int a = 0; a < this.num_state; a++) {
            outs.writeDouble(this.state_x[a]); 
        }
 
        for (int a = 0; a < this.num_state; a++) {
            outs.writeDouble(this.state_y[a]); 
        }
 
    }
 
    public path_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public path_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sampling.path_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sampling.path_data o = new sampling.path_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.num_state = ins.readInt();
 
        this.state_x = new double[(int) num_state];
        for (int a = 0; a < this.num_state; a++) {
            this.state_x[a] = ins.readDouble();
        }
 
        this.state_y = new double[(int) num_state];
        for (int a = 0; a < this.num_state; a++) {
            this.state_y[a] = ins.readDouble();
        }
 
    }
 
    public sampling.path_data copy()
    {
        sampling.path_data outobj = new sampling.path_data();
        outobj.num_state = this.num_state;
 
        outobj.state_x = new double[(int) num_state];
        if (this.num_state > 0)
            System.arraycopy(this.state_x, 0, outobj.state_x, 0, this.num_state); 
        outobj.state_y = new double[(int) num_state];
        if (this.num_state > 0)
            System.arraycopy(this.state_y, 0, outobj.state_y, 0, this.num_state); 
        return outobj;
    }
 
}

